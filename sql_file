--1. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. 
--Output one of the following statements for each record in the table:

--Equilateral: It's a triangle with  sides of equal length.
--Isosceles: It's a triangle with  sides of equal length.
--Scalene: It's a triangle with  sides of differing lengths.
--Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT CASE WHEN A+B <=C OR B+C<=A OR A+C<=B THEN 'Not A Triangle
            WHEN A=B AND B=C THEN 'Equilateral'
            WHEN A=B OR B=C OR A=C THEN 'Isosceles'
            ELSE 'Scalene' END
FROM TRIANGLES;

--------------------------------------------------------------------------------------------------------------------
--2. Generate the following two result sets:

--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). 
--For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

SELECT Name || '('||LEFT(Occupation,1)|| ')'
FROM OCCUPATIONS
ORDER BY Name;
SELECT 'There are a total of' ||' '|| COUNT(Occupation) ||' ' ||LOWER(Occupation)||'s.' 
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY 1;

-----------------------------------------------------------------------------------------------------------------

--3. Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. 
--The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

--Note: Print NULL when there are no more names corresponding to an occupation.

SELECT Doctor, Professor, Singer, Actor
FROM ( 
      SELECT Name,
             Occupation,
             ROW_NUMBER() OVER (PARTITION BY Occupation ORDER BY Name) AS row_num FROM OCCUPATIONS) AS  source
PIVOT
(MAX(Name) FOR Occupation IN ('Doctor' AS Doctor,'Professor' AS Professor,'Singer' AS Singer,'Actor' AS Actor))
ORDER BY row_num;

---------------------------------------------------------------------------------------------------------------------
   
--4. You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
--Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

--Root: If node is root node.
--Leaf: If node is leaf node.
--Inner: If node is neither root nor leaf node.

SELECT N,
       CASE WHEN P IS NULL THEN 'Root'
       WHEN (SELECT COUNT(*) FROM BST WHERE P =b.N)>0 THEN 'Inner'
       ELSE 'Leaf' END
FROM BST AS b
ORDER BY N;

-------------------------------------------------------------------------------------------------------------------------

--5. Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 

--Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, 
--total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.

--The tables may contain duplicate records.
--The company_code is string, so the sorting should not be numeric. For example, 
i--f the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.

SELECT c.company_code,
       c.founder,
       COUNT(DISTINCT lead_manager_code) AS num_lead_managers,
       COUNT(DISTINCT senior_manager_code) AS num_senior_managers,
       COUNT(DISTINCT manager_code) AS num_managers,
       COUNT(DISTINCT employee_code) AS num_employees
FROM Employee AS e
JOIN Company AS c
ON c.company_code = e.company_code
GROUP BY c.company_code , c.founder
ORDER BY c.company_code;


